let Joi,bcrypt,RefreshToken,User,CustomErrorHandler,JwtService,REFRESH_SECRET;_f7f‍.x([["default",()=>_f7f‍.o]]);_f7f‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_f7f‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_f7f‍.w("../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_f7f‍.w("../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_f7f‍.w("../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_f7f‍.w("../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);







const loginController = {
    async login(req, res, next){
        //user detail validation 
        const loginSchema = Joi.object({
            email: Joi.string().email().required(),
            password:Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
        })

       const {error} = loginSchema.validate(req.body);
       if(error){
         return next(error)
       }


       //Check user is in Database
       try {
        const user =  await User.findOne({email:req.body.email});
        
        if(!user){
            
            return next(CustomErrorHandler.wrongCredentials());
        }
        
        //Compare password
        const match = await bcrypt.compare( req.body.password,user.password);
        
        if(!match){
            return next(CustomErrorHandler.wrongCredentials());
        }

        //Token generation
        const access_token = JwtService.sign({ _id:user._id,role:user.role});
        const refresh_token = JwtService.sign({ _id:user._id,role:user.role},'1y',REFRESH_SECRET);

          //DB whitelist
          await RefreshToken.create({token:refresh_token});
        
        res.json({access_token,refresh_token});

       } catch (err) {
         return next(err);
       }

       

    }

}


_f7f‍.d(loginController);